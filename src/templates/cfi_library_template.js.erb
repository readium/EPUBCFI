(function (global, factory) {
    global.EPUBcfi = factory();
    if (typeof define === "function" && define.amd) {
        define(function () {
            return global.EPUBcfi;
        });
    } else if (typeof module === "object" && module.exports) {
        module.exports = global.EPUBcfi;
    }
}(this, function () {

    var EPUBcfi = {};

    <%= cfi_blacklist %>
    <%= cfi_parser %>
    <%= cfi_interpreter %>
    <%= cfi_instructions %>
    <%= runtime_errors %>
    <%= cfi_generator %>

    var interpreter = EPUBcfi.Interpreter;
    var generator = EPUBcfi.Generator;
    var instructions = EPUBcfi.CFIInstructions;
    var blacklist = EPUBcfi.Blacklist;

    // The public interface
    var Parser = EPUBcfi.Parser;
    var NodeTypeError = EPUBcfi.NodeTypeError;
    var OutOfRangeError = EPUBcfi.OutOfRangeError;
    var TerminusError = EPUBcfi.TerminusError;
    var CFIAssertionError = EPUBcfi.CFIAssertionError;
    EPUBcfi = {

        getBlacklist: function () {
            return blacklist.getBlacklist();
        },
        setBlacklist: function (obj) {
            return blacklist.setBlacklist(obj);
        },
        appendBlacklist: function (obj) {
            return blacklist.appendBlacklist(obj);
        },
        getContentDocHref: function (CFI, packageDocument) {
            return interpreter.getContentDocHref(CFI, packageDocument);
        },
        injectElement: function (CFI, contentDocument, elementToInject) {
            return interpreter.injectElement(CFI, contentDocument, elementToInject);
        },
        getTargetElement: function (CFI, contentDocument) {
            return interpreter.getTargetElement(CFI, contentDocument);
        },
        getTargetElementWithPartialCFI: function (contentDocumentCFI, contentDocument) {
            return interpreter.getTargetElementWithPartialCFI(contentDocumentCFI, contentDocument);
        },
        getTextTerminusInfoWithPartialCFI: function (contentDocumentCFI, contentDocument) {
            return interpreter.getTextTerminusInfoWithPartialCFI(contentDocumentCFI, contentDocument);
        },
        generateCharacterOffsetCFIComponent: function (startTextNode, characterOffset) {
            return generator.generateCharacterOffsetCFIComponent(startTextNode, characterOffset);
        },
        generateElementCFIComponent: function (startElement) {
            return generator.generateElementCFIComponent(startElement);
        },
        generatePackageDocumentCFIComponent: function (contentDocumentName, packageDocument) {
            return generator.generatePackageDocumentCFIComponent(contentDocumentName, packageDocument);
        },
        generatePackageDocumentCFIComponentWithSpineIndex: function (spineIndex, packageDocument) {
            return generator.generatePackageDocumentCFIComponentWithSpineIndex(spineIndex, packageDocument);
        },
        generateCompleteCFI: function (packageDocumentCFIComponent, contentDocumentCFIComponent) {
            return generator.generateCompleteCFI(packageDocumentCFIComponent, contentDocumentCFIComponent);
        },
        injectElementAtOffset: function ($textNodeList, textOffset, elementToInject) {
            return instructions.injectCFIMarkerIntoText($textNodeList, textOffset, elementToInject);
        },
        injectRangeElements: function (rangeCFI, contentDocument, startElementToInject, endElementToInject) {
            return interpreter.injectRangeElements(rangeCFI, contentDocument, startElementToInject, endElementToInject);
        },
        getRangeTargetElements: function (rangeCFI, contentDocument) {
            return interpreter.getRangeTargetElements(rangeCFI, contentDocument);
        },
        generateCharOffsetRangeComponent: function (rangeStartElement, startOffset, rangeEndElement, endOffset) {
            return generator.generateCharOffsetRangeComponent(rangeStartElement, startOffset, rangeEndElement, endOffset);
        },
        generateElementRangeComponent: function (rangeStartElement, rangeEndElement) {
            return generator.generateElementRangeComponent(rangeStartElement, rangeEndElement);
        },
        generateRangeComponent: function (rangeStartElement, startOffset, rangeEndElement, endOffset) {
            return generator.generateRangeComponent(rangeStartElement, startOffset, rangeEndElement, endOffset);
        },
        isRangeCfi: function (cfi) {
            return interpreter.isRangeCfi(cfi);
        }
    };

    EPUBcfi.Interpreter = interpreter;
    EPUBcfi.Generator = generator;
    EPUBcfi.CFIInstructions = instructions;
    EPUBcfi.Blacklist = blacklist;

    EPUBcfi.Parser = Parser;
    EPUBcfi.NodeTypeError = NodeTypeError;
    EPUBcfi.OutOfRangeError = OutOfRangeError;
    EPUBcfi.TerminusError = TerminusError;
    EPUBcfi.CFIAssertionError = CFIAssertionError;

    return EPUBcfi;

}));